#include <glm/gtc/matrix_transform.hpp>

#include "Painter.hpp"
#include "ParticleSystem.hpp"


namespace particle_system
{
	int get_cell_index(const glm::vec3 v)
	{
		using namespace c;
		return static_cast<int>(
			floor((v.x - xmin) / dx) + 
			floor((v.y - ymin) / dy) * (float) K + 
			floor((v.z - zmin) / dz) * (float) K * (float) L
			);
	}

	//int get_cell_index(const glm::vec3 v)
	//{
	//	return static_cast<int>(get_z_index(get_grid_coords(v)));
	//}

	inline glm::ivec3 get_grid_coords(glm::vec3 const v)
	{
		return glm::ivec3(floor((v.x - c::xmin) / c::dx), floor((v.y - c::ymin) / c::dy), floor((v.z - c::zmin) / c::dz));
	}

	glm::vec3 get_grid_coords_in_real_system(glm::vec3 const v)
	{
		return glm::vec3(floorf((v.x - c::xmin) / c::dx)*c::dx + c::xmin, floorf((v.y - c::ymin) / c::dy)*c::dy + c::ymin, floorf((v.z - c::zmin) / c::dz)*c::dz + c::zmin);
	}

	bool out_of_grid_scope(const glm::vec3 v)
	{
		using namespace c;
		return v.x < xmin || v.x > xmax || v.y < ymin || v.y > ymax || v.z < zmin || v.z > zmax;
	}

	inline uint64_t get_z_index(glm::ivec3 const v)
	{
		return mortonEncode_magicbits(v.x, v.y, v.z);
	}

	// http://www.forceflow.be/2013/10/07/morton-encodingdecoding-through-bit-interleaving-implementations/
	inline uint64_t mortonEncode_magicbits(unsigned int x, unsigned int y, unsigned int z)
	{
		uint64_t answer = 0;
		answer |= splitBy3(x) | splitBy3(y) << 1 | splitBy3(z) << 2;
		return answer;
	}

	uint64_t splitBy3(unsigned int a)
	{
		uint64_t x = a & 0x1fffff; // we only look at the first 21 bits
		x = (x | x << 32) & 0x1f00000000ffff;  // shift left 32 bits, OR with self, and 00011111000000000000000000000000000000001111111111111111
		x = (x | x << 16) & 0x1f0000ff0000ff;  // shift left 32 bits, OR with self, and 00011111000000000000000011111111000000000000000011111111
		x = (x | x << 8) & 0x100f00f00f00f00f; // shift left 32 bits, OR with self, and 0001000000001111000000001111000000001111000000001111000000000000
		x = (x | x << 4) & 0x10c30c30c30c30c3; // shift left 32 bits, OR with self, and 0001000011000011000011000011000011000011000011000011000100000000
		x = (x | x << 2) & 0x1249249249249249;
		return x;
	}
}

ParticleSystem::ParticleSystem()
{
	setup_buffers();
}

void ParticleSystem::paint(Painter& p) const
{
	p.paint(*this);
}

void ParticleSystem::setup_buffers(void)
{
	using particle_system::get_cell_index;

	int index = 0;
	for(auto const & p : particles)
	{
		auto particle_position = p.position;
		glm::mat4 model;
		model = glm::translate(model, particle_position);
		model = glm::scale(model, glm::vec3(0.02f));
		model_matrices[index] = model;
		bin_idx[index] = static_cast<float>(get_cell_index(particle_position));
		surface_particles[index] = p.at_surface;
		index++;
	}

	glGenVertexArrays(1, &this->VAO);
	glBindVertexArray(this->VAO);

	glGenBuffers(1, &this->model_mat_VBO);
	glBindBuffer(GL_ARRAY_BUFFER, this->model_mat_VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(glm::mat4) * c::N, &this->model_matrices[0], GL_DYNAMIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glGenBuffers(1, &this->bin_idx_VBO);
	glBindBuffer(GL_ARRAY_BUFFER, this->bin_idx_VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat) * c::N, &this->bin_idx[0], GL_DYNAMIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glGenBuffers(1, &this->at_surface_VBO);
	glBindBuffer(GL_ARRAY_BUFFER, this->at_surface_VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(GLuint) * c::N, &this->surface_particles[0], GL_DYNAMIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glGenBuffers(1, &this->VBO);
	glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(this->sphere_vertices), &this->sphere_vertices[0], GL_STATIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	//point_vertices
	//glGenBuffers(1, &this->VBO);
	//glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
	//glBufferData(GL_ARRAY_BUFFER, sizeof(this->point_vertices), &this->point_vertices[0], GL_STATIC_DRAW);
	//glBindBuffer(GL_ARRAY_BUFFER, 0);

	//glGenBuffers(1, &this->EBO);
	//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->EBO);
	//glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(this->sphere_indices), &this->sphere_indices[0], GL_STATIC_DRAW);
	//glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (GLvoid*) 0);
	//glVertexAttribDivisor(0, 0);

	glBindBuffer(GL_ARRAY_BUFFER, this->bin_idx_VBO);
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 1, GL_FLOAT, GL_FALSE, 0, (GLvoid*) 0);
	glVertexAttribDivisor(1, 1);
	//By setting the attribute divisor to 1 we're effectively telling OpenGL that the vertex attribute at attribute location x is an instanced array.

	glBindBuffer(GL_ARRAY_BUFFER, this->at_surface_VBO);
	glEnableVertexAttribArray(6);
	glVertexAttribPointer(6, 1, GL_UNSIGNED_INT, GL_FALSE, 0, (GLvoid*) 0);
	glVertexAttribDivisor(6, 1);

	glBindBuffer(GL_ARRAY_BUFFER, this->model_mat_VBO);
	// Set attribute pointers for matrix (4 x vec4)
	glEnableVertexAttribArray(2);
	glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (GLvoid*) 0);
	glEnableVertexAttribArray(3);
	glVertexAttribPointer(3, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (GLvoid*) (sizeof(glm::vec4)));
	glEnableVertexAttribArray(4);
	glVertexAttribPointer(4, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (GLvoid*) (2 * sizeof(glm::vec4)));
	glEnableVertexAttribArray(5);
	glVertexAttribPointer(5, 4, GL_FLOAT, GL_FALSE, sizeof(glm::mat4), (GLvoid*) (3 * sizeof(glm::vec4)));

	glVertexAttribDivisor(2, 1);
	glVertexAttribDivisor(3, 1);
	glVertexAttribDivisor(4, 1);
	glVertexAttribDivisor(5, 1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}

void ParticleSystem::reset_buffers()
{
	glDisableVertexAttribArray(5);
	glDisableVertexAttribArray(4);
	glDisableVertexAttribArray(3);
	glDisableVertexAttribArray(2);
	glDisableVertexAttribArray(1);
	glDisableVertexAttribArray(0);
	//glDeleteBuffers(1, &this->EBO);
	glDeleteBuffers(1, &this->VBO); 
	glDeleteBuffers(1, &this->at_surface_VBO);
	glDeleteBuffers(1, &this->bin_idx_VBO);
	glDeleteBuffers(1, &this->model_mat_VBO);
	glDeleteVertexArrays(1, &this->VAO);

	setup_buffers();
}

void ParticleSystem::update_buffers()
{
	using particle_system::get_cell_index;

	int index = 0;
	for(auto const & p : particles)
	{
		auto const particle_position = p.position;
		glm::mat4 model;
		model = glm::translate(model, particle_position);
		model = glm::scale(model, glm::vec3(0.02f));
		model_matrices[index] = model;
		bin_idx[index] = static_cast<float>(get_cell_index(particle_position));
		surface_particles[index] = p.at_surface;
		index++;
	}

	// alternatywa: http://www.gamedev.net/topic/666461-map-buffer-range-super-slow/

	glBindBuffer(GL_ARRAY_BUFFER, this->model_mat_VBO);
	glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(glm::mat4) * c::N, &this->model_matrices[0]);      //replace data in VBO with new data
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindBuffer(GL_ARRAY_BUFFER, this->bin_idx_VBO);
	glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(GLfloat) * c::N, &this->bin_idx[0]);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindBuffer(GL_ARRAY_BUFFER, this->at_surface_VBO);
	glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(GLuint) * c::N, &this->surface_particles[0]);
	glBindBuffer(GL_ARRAY_BUFFER, 0);
}

std::unique_ptr<glm::vec4[]> ParticleSystem::get_position_color_field_data()
{
	auto position_color_field_data = make_unique<glm::vec4[]>(c::N);
	for(int i = 0; i < c::N; ++i)
		position_color_field_data[i] = glm::vec4(particles[i].position, particles[i].color_field_gradient_magnitude);
	return position_color_field_data;
}

void ParticleSystem::move_particles_around(float dt)
{
	//RANDOM(-0.001f, 0.001f);
	double v0 = 10.0;
	float a = -0.008f;
	static float t = 0.0f;
	t += dt*200.f;
	//float x = (a*sqrt(2)*cos(t)) / (pow(sin(t), 2) + 1);
	//float y = (a*sqrt(2)*cos(t)*sin(t)) / (pow(sin(t), 2) + 1);

	for(auto& p : particles)
	{
		float r = RANDOM(0.002f, 0.012f);
		//float tt = t*RANDOM(0.7f, 1.2f);
		float x = r*cos(t);
		float y = r*sin(t);
		float z = 5.0f*r*cos(t*10.0f)*sin(t*10.0f);

		p.position = p.position + glm::vec3(x, y, z);// *static_cast<float>(dt) *100.0f;
	}
}

void ParticleSystem::insert_sort_particles_by_indices()
{
	using particle_system::get_cell_index;
	const size_t size = c::N;

	for(int i = 1; i < size; i++)
	{
		auto const particle_i = particles[i];
		auto const particle_i_idx = get_cell_index(particle_i.position);
		int j;

		for(j = i - 1; j >= 0 && get_cell_index(particles[j].position) > particle_i_idx; j--)
			particles[j + 1] = particles[j];

		particles[j + 1] = particle_i;
	}

	//for(auto it = begin(particles) + 1; it != end(particles); ++it)
	//{
	//	auto const particle_i_idx = get_cell_index(it->position);
	//	auto insertion = it - 1;
	//	for(; insertion >= std::begin(particles) && get_cell_index(insertion->position) > particle_i_idx; insertion--);
	//	std::rotate(insertion++, it, std::next(it));
	//}
}

GLfloat const ParticleSystem::point_vertices[3] =
{
	0.0f, 0.0f, 0.0f
};

GLfloat const ParticleSystem::sphere_vertices[720] =
{
	// f 1//1 14//1 13//1
	-3.30423519233678e-018f, -0.5f, -1.32169407693471e-018f,
	0.2126615f, -0.425327f, 0.1545055f,
	-0.081228f, -0.425327f, 0.2499975f,
	// f 2//2 14//2 16//2
	0.3618035f, -0.22361f, 0.2628625f,
	0.2126615f, -0.425327f, 0.1545055f,
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	// f 1//3 13//3 18//3
	-3.30423519233678e-018f, -0.5f, -1.32169407693471e-018f,
	-0.081228f, -0.425327f, 0.2499975f,
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	// f 1//4 18//4 20//4
	-3.30423519233678e-018f, -0.5f, -1.32169407693471e-018f,
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	-0.081228f, -0.425327f, -0.2499975f,
	// f 1//5 20//5 17//5
	-3.30423519233678e-018f, -0.5f, -1.32169407693471e-018f,
	-0.081228f, -0.425327f, -0.2499975f,
	0.2126615f, -0.425327f, -0.1545055f,
	// f 2//6 16//6 23//6
	0.3618035f, -0.22361f, 0.2628625f,
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	// f 3//7 15//7 25//7
	-0.138194f, -0.22361f, 0.4253245f,
	0.1314345f, -0.262869f, 0.404506f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	// f 4//8 19//8 27//8
	-0.447213f, -0.223608f, -1.32169407693471e-018f,
	-0.3440945f, -0.262868f, 0.2499985f,
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	// f 5//9 21//9 29//9
	-0.138194f, -0.22361f, -0.4253245f,
	-0.3440945f, -0.262868f, -0.2499985f,
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	// f 6//10 22//10 31//10
	0.3618035f, -0.22361f, -0.2628625f,
	0.1314345f, -0.262869f, -0.404506f,
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	// f 2//11 23//11 26//11
	0.3618035f, -0.22361f, 0.2628625f,
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 3//12 25//12 28//12
	-0.138194f, -0.22361f, 0.4253245f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 4//13 27//13 30//13
	-0.447213f, -0.223608f, -1.32169407693471e-018f,
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 5//14 29//14 32//14
	-0.138194f, -0.22361f, -0.4253245f,
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	// f 6//15 31//15 24//15
	0.3618035f, -0.22361f, -0.2628625f,
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 7//16 33//16 38//16
	0.138194f, 0.22361f, 0.4253245f,
	0.3440945f, 0.262868f, 0.2499985f,
	0.081228f, 0.425327f, 0.2499975f,
	// f 8//17 34//17 40//17
	-0.3618035f, 0.22361f, 0.2628625f,
	-0.1314345f, 0.262869f, 0.404506f,
	-0.2126615f, 0.425327f, 0.1545055f,
	// f 9//18 35//18 41//18
	-0.3618035f, 0.22361f, -0.2628625f,
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	-0.2126615f, 0.425327f, -0.1545055f,
	// f 10//19 36//19 42//19
	0.138194f, 0.22361f, -0.4253245f,
	-0.1314345f, 0.262869f, -0.404506f,
	0.081228f, 0.425327f, -0.2499975f,
	// f 11//20 37//20 39//20
	0.447213f, 0.223608f, -1.32169407693471e-018f,
	0.3440945f, 0.262868f, -0.2499985f,
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	// f 13//21 15//21 3//21
	-0.081228f, -0.425327f, 0.2499975f,
	0.1314345f, -0.262869f, 0.404506f,
	-0.138194f, -0.22361f, 0.4253245f,
	// f 13//22 14//22 15//22
	-0.081228f, -0.425327f, 0.2499975f,
	0.2126615f, -0.425327f, 0.1545055f,
	0.1314345f, -0.262869f, 0.404506f,
	// f 14//23 2//23 15//23
	0.2126615f, -0.425327f, 0.1545055f,
	0.3618035f, -0.22361f, 0.2628625f,
	0.1314345f, -0.262869f, 0.404506f,
	// f 16//24 17//24 6//24
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	0.2126615f, -0.425327f, -0.1545055f,
	0.3618035f, -0.22361f, -0.2628625f,
	// f 16//25 14//25 17//25
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	0.2126615f, -0.425327f, 0.1545055f,
	0.2126615f, -0.425327f, -0.1545055f,
	// f 14//26 1//26 17//26
	0.2126615f, -0.425327f, 0.1545055f,
	-3.30423519233678e-018f, -0.5f, -1.32169407693471e-018f,
	0.2126615f, -0.425327f, -0.1545055f,
	// f 18//27 19//27 4//27
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	-0.3440945f, -0.262868f, 0.2499985f,
	-0.447213f, -0.223608f, -1.32169407693471e-018f,
	// f 18//28 13//28 19//28
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	-0.081228f, -0.425327f, 0.2499975f,
	-0.3440945f, -0.262868f, 0.2499985f,
	// f 13//29 3//29 19//29
	-0.081228f, -0.425327f, 0.2499975f,
	-0.138194f, -0.22361f, 0.4253245f,
	-0.3440945f, -0.262868f, 0.2499985f,
	// f 20//30 21//30 5//30
	-0.081228f, -0.425327f, -0.2499975f,
	-0.3440945f, -0.262868f, -0.2499985f,
	-0.138194f, -0.22361f, -0.4253245f,
	// f 20//31 18//31 21//31
	-0.081228f, -0.425327f, -0.2499975f,
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	-0.3440945f, -0.262868f, -0.2499985f,
	// f 18//32 4//32 21//32
	-0.262865f, -0.425326f, -1.32169407693471e-018f,
	-0.447213f, -0.223608f, -1.32169407693471e-018f,
	-0.3440945f, -0.262868f, -0.2499985f,
	// f 17//33 22//33 6//33
	0.2126615f, -0.425327f, -0.1545055f,
	0.1314345f, -0.262869f, -0.404506f,
	0.3618035f, -0.22361f, -0.2628625f,
	// f 17//34 20//34 22//34
	0.2126615f, -0.425327f, -0.1545055f,
	-0.081228f, -0.425327f, -0.2499975f,
	0.1314345f, -0.262869f, -0.404506f,
	// f 20//35 5//35 22//35
	-0.081228f, -0.425327f, -0.2499975f,
	-0.138194f, -0.22361f, -0.4253245f,
	0.1314345f, -0.262869f, -0.404506f,
	// f 23//36 24//36 11//36
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	0.447213f, 0.223608f, -1.32169407693471e-018f,
	// f 23//37 16//37 24//37
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 16//38 6//38 24//38
	0.425324f, -0.262868f, -1.32169407693471e-018f,
	0.3618035f, -0.22361f, -0.2628625f,
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 25//39 26//39 7//39
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	0.138194f, 0.22361f, 0.4253245f,
	// f 25//40 15//40 26//40
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	0.1314345f, -0.262869f, 0.404506f,
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 15//41 2//41 26//41
	0.1314345f, -0.262869f, 0.404506f,
	0.3618035f, -0.22361f, 0.2628625f,
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 27//42 28//42 8//42
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	-0.3618035f, 0.22361f, 0.2628625f,
	// f 27//43 19//43 28//43
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	-0.3440945f, -0.262868f, 0.2499985f,
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 19//44 3//44 28//44
	-0.3440945f, -0.262868f, 0.2499985f,
	-0.138194f, -0.22361f, 0.4253245f,
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	// f 29//45 30//45 9//45
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	-0.3618035f, 0.22361f, -0.2628625f,
	// f 29//46 21//46 30//46
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-0.3440945f, -0.262868f, -0.2499985f,
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 21//47 4//47 30//47
	-0.3440945f, -0.262868f, -0.2499985f,
	-0.447213f, -0.223608f, -1.32169407693471e-018f,
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	// f 31//48 32//48 10//48
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	0.138194f, 0.22361f, -0.4253245f,
	// f 31//49 22//49 32//49
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	0.1314345f, -0.262869f, -0.404506f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	// f 22//50 5//50 32//50
	0.1314345f, -0.262869f, -0.404506f,
	-0.138194f, -0.22361f, -0.4253245f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	// f 26//51 33//51 7//51
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	0.3440945f, 0.262868f, 0.2499985f,
	0.138194f, 0.22361f, 0.4253245f,
	// f 26//52 23//52 33//52
	0.293893f, -1.58603289232165e-017f, 0.4045085f,
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	0.3440945f, 0.262868f, 0.2499985f,
	// f 23//53 11//53 33//53
	0.475529f, -1.58603289232165e-017f, 0.1545065f,
	0.447213f, 0.223608f, -1.32169407693471e-018f,
	0.3440945f, 0.262868f, 0.2499985f,
	// f 28//54 34//54 8//54
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	-0.1314345f, 0.262869f, 0.404506f,
	-0.3618035f, 0.22361f, 0.2628625f,
	// f 28//55 25//55 34//55
	-0.293893f, -1.58603289232165e-017f, 0.4045085f,
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	-0.1314345f, 0.262869f, 0.404506f,
	// f 25//56 7//56 34//56
	-3.30423519233678e-018f, -1.58603289232165e-017f, 0.5f,
	0.138194f, 0.22361f, 0.4253245f,
	-0.1314345f, 0.262869f, 0.404506f,
	// f 30//57 35//57 9//57
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	-0.3618035f, 0.22361f, -0.2628625f,
	// f 30//58 27//58 35//58
	-0.475529f, -1.58603289232165e-017f, -0.1545065f,
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	// f 27//59 8//59 35//59
	-0.475529f, -1.58603289232165e-017f, 0.1545065f,
	-0.3618035f, 0.22361f, 0.2628625f,
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	// f 32//60 36//60 10//60
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	-0.1314345f, 0.262869f, -0.404506f,
	0.138194f, 0.22361f, -0.4253245f,
	// f 32//61 29//61 36//61
	-3.30423519233678e-018f, -1.58603289232165e-017f, -0.5f,
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-0.1314345f, 0.262869f, -0.404506f,
	// f 29//62 9//62 36//62
	-0.293893f, -1.58603289232165e-017f, -0.4045085f,
	-0.3618035f, 0.22361f, -0.2628625f,
	-0.1314345f, 0.262869f, -0.404506f,
	// f 24//63 37//63 11//63
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	0.3440945f, 0.262868f, -0.2499985f,
	0.447213f, 0.223608f, -1.32169407693471e-018f,
	// f 24//64 31//64 37//64
	0.475529f, -1.58603289232165e-017f, -0.1545065f,
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	0.3440945f, 0.262868f, -0.2499985f,
	// f 31//65 10//65 37//65
	0.293893f, -1.58603289232165e-017f, -0.4045085f,
	0.138194f, 0.22361f, -0.4253245f,
	0.3440945f, 0.262868f, -0.2499985f,
	// f 38//66 39//66 12//66
	0.081228f, 0.425327f, 0.2499975f,
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	-3.30423519233678e-018f, 0.5f, -1.32169407693471e-018f,
	// f 38//67 33//67 39//67
	0.081228f, 0.425327f, 0.2499975f,
	0.3440945f, 0.262868f, 0.2499985f,
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	// f 33//68 11//68 39//68
	0.3440945f, 0.262868f, 0.2499985f,
	0.447213f, 0.223608f, -1.32169407693471e-018f,
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	// f 40//69 38//69 12//69
	-0.2126615f, 0.425327f, 0.1545055f,
	0.081228f, 0.425327f, 0.2499975f,
	-3.30423519233678e-018f, 0.5f, -1.32169407693471e-018f,
	// f 40//70 34//70 38//70
	-0.2126615f, 0.425327f, 0.1545055f,
	-0.1314345f, 0.262869f, 0.404506f,
	0.081228f, 0.425327f, 0.2499975f,
	// f 34//71 7//71 38//71
	-0.1314345f, 0.262869f, 0.404506f,
	0.138194f, 0.22361f, 0.4253245f,
	0.081228f, 0.425327f, 0.2499975f,
	// f 41//72 40//72 12//72
	-0.2126615f, 0.425327f, -0.1545055f,
	-0.2126615f, 0.425327f, 0.1545055f,
	-3.30423519233678e-018f, 0.5f, -1.32169407693471e-018f,
	// f 41//73 35//73 40//73
	-0.2126615f, 0.425327f, -0.1545055f,
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	-0.2126615f, 0.425327f, 0.1545055f,
	// f 35//74 8//74 40//74
	-0.425324f, 0.262868f, -1.32169407693471e-018f,
	-0.3618035f, 0.22361f, 0.2628625f,
	-0.2126615f, 0.425327f, 0.1545055f,
	// f 42//75 41//75 12//75
	0.081228f, 0.425327f, -0.2499975f,
	-0.2126615f, 0.425327f, -0.1545055f,
	-3.30423519233678e-018f, 0.5f, -1.32169407693471e-018f,
	// f 42//76 36//76 41//76
	0.081228f, 0.425327f, -0.2499975f,
	-0.1314345f, 0.262869f, -0.404506f,
	-0.2126615f, 0.425327f, -0.1545055f,
	// f 36//77 9//77 41//77
	-0.1314345f, 0.262869f, -0.404506f,
	-0.3618035f, 0.22361f, -0.2628625f,
	-0.2126615f, 0.425327f, -0.1545055f,
	// f 39//78 42//78 12//78
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	0.081228f, 0.425327f, -0.2499975f,
	-3.30423519233678e-018f, 0.5f, -1.32169407693471e-018f,
	// f 39//79 37//79 42//79
	0.262865f, 0.425326f, -1.32169407693471e-018f,
	0.3440945f, 0.262868f, -0.2499985f,
	0.081228f, 0.425327f, -0.2499975f,
	// f 37//80 10//80 42//80
	0.3440945f, 0.262868f, -0.2499985f,
	0.138194f, 0.22361f, -0.4253245f,
	0.081228f, 0.425327f, -0.2499975f
};
//cube co-ordinated
/*
GLfloat const ParticleSystem::sphere_vertices[294] =
{
	0.000000f, -0.878472f, -0.000000f,
	0.350694f, -0.819444f, -0.000000f,
	-0.000000f, -0.819444f, 0.350694f,
	-0.350694f, -0.819444f, -0.000000f,
	0.000000f, -0.819444f, -0.350695f,
	0.326389f, -0.763889f, -0.326389f,
	0.326389f, -0.763889f, 0.326389f,
	-0.326389f, -0.763889f, 0.326389f,
	-0.326389f, -0.763889f, -0.326389f,
	-0.000000f, 0.878472f, 0.000000f,
	0.000000f, 0.819444f, -0.350694f,
	-0.350695f, 0.819444f, 0.000000f,
	-0.000000f, 0.819444f, 0.350695f,
	0.350694f, 0.819444f, 0.000000f,
	0.326389f, 0.763889f, -0.326389f,
	-0.326389f, 0.763889f, -0.326389f,
	-0.326389f, 0.763889f, 0.326389f,
	0.326389f, 0.763889f, 0.326389f,
	0.878472f, 0.000000f, 0.000000f,
	0.819445f, 0.000000f, -0.350694f,
	0.819444f, 0.350694f, 0.000000f,
	0.819444f, -0.000000f, 0.350695f,
	0.819444f, -0.350694f, 0.000000f,
	0.763889f, -0.326389f, -0.326389f,
	0.763889f, 0.326389f, -0.326389f,
	0.763889f, 0.326389f, 0.326389f,
	0.763889f, -0.326389f, 0.326389f,
	-0.000000f, -0.000000f, 0.878472f,
	0.350694f, 0.000000f, 0.819445f,
	-0.000000f, 0.350694f, 0.819444f,
	-0.350695f, 0.000000f, 0.819444f,
	-0.000000f, -0.350694f, 0.819444f,
	0.326389f, -0.326389f, 0.763889f,
	0.326389f, 0.326389f, 0.763889f,
	-0.326389f, 0.326389f, 0.763889f,
	-0.326389f, -0.326389f, 0.763889f,
	-0.878472f, 0.000000f, -0.000000f,
	-0.819445f, 0.000000f, 0.350694f,
	-0.819444f, 0.350694f, -0.000000f,
	-0.819444f, 0.000000f, -0.350695f,
	-0.819444f, -0.350694f, -0.000000f,
	-0.763889f, -0.326389f, 0.326389f,
	-0.763889f, 0.326389f, 0.326389f,
	-0.763889f, 0.326389f, -0.326389f,
	-0.763889f, -0.326389f, -0.326389f,
	0.000000f, 0.000000f, -0.878472f,
	0.350695f, 0.000000f, -0.819444f,
	0.000000f, -0.350694f, -0.819444f,
	-0.350694f, 0.000000f, -0.819444f,
	0.000000f, 0.350694f, -0.819444f,
	0.326389f, 0.326389f, -0.763889f,
	0.326389f, -0.326389f, -0.763889f,
	-0.326389f, -0.326389f, -0.763889f,
	-0.326389f, 0.326389f, -0.763889f,
	0.598958f, -0.598958f, -0.302083f,
	0.643229f, -0.643229f, 0.000000f,
	0.598958f, -0.598958f, 0.302083f,
	0.302083f, -0.598958f, -0.598958f,
	0.000000f, -0.643229f, -0.643229f,
	-0.302083f, -0.598958f, -0.598958f,
	0.598958f, -0.302083f, -0.598958f,
	0.643229f, 0.000000f, -0.643229f,
	0.598958f, 0.302083f, -0.598958f,
	0.302083f, -0.598958f, 0.598958f,
	-0.000000f, -0.643229f, 0.643229f,
	-0.302083f, -0.598958f, 0.598958f,
	0.598958f, -0.302083f, 0.598958f,
	0.643229f, 0.000000f, 0.643229f,
	0.598958f, 0.302083f, 0.598959f,
	-0.598958f, -0.598958f, 0.302083f,
	-0.643229f, -0.643229f, -0.000000f,
	-0.598958f, -0.598958f, -0.302084f,
	-0.598958f, -0.302083f, 0.598958f,
	-0.643229f, 0.000000f, 0.643229f,
	-0.598959f, 0.302083f, 0.598958f,
	-0.598958f, -0.302083f, -0.598958f,
	-0.643229f, 0.000000f, -0.643229f,
	-0.598958f, 0.302083f, -0.598958f,
	0.598958f, 0.598958f, -0.302083f,
	0.643229f, 0.643229f, 0.000000f,
	0.598958f, 0.598958f, 0.302084f,
	0.302083f, 0.598958f, -0.598958f,
	0.000000f, 0.643229f, -0.643229f,
	-0.302083f, 0.598958f, -0.598958f,
	0.302083f, 0.598958f, 0.598959f,
	-0.000000f, 0.643229f, 0.643229f,
	-0.302084f, 0.598958f, 0.598958f,
	-0.598958f, 0.598958f, 0.302083f,
	-0.643229f, 0.643229f, -0.000000f,
	-0.598958f, 0.598958f, -0.302083f,
	0.509259f, -0.509259f, -0.509259f,
	0.509259f, -0.509259f, 0.509259f,
	-0.509259f, -0.509259f, 0.509259f,
	-0.509259f, -0.509259f, -0.509259f,
	0.509259f, 0.509259f, -0.509259f,
	0.509259f, 0.509259f, 0.509260f,
	-0.509260f, 0.509259f, 0.509259f,
	-0.509259f, 0.509259f, -0.509259f
};
*/
//indeces for drawing the vertices in specified order
GLuint const ParticleSystem::sphere_indices[576] =
{
	0, 4, 5,
	1, 5, 54,
	4, 58, 57,
	5, 57, 90,
	0, 1, 6,
	2, 6, 63,
	1, 55, 56,
	6, 56, 91,
	0, 2, 7,
	3, 7, 69,
	2, 64, 65,
	7, 65, 92,
	0, 3, 8,
	4, 8, 59,
	3, 70, 71,
	8, 71, 93,
	9, 13, 14,
	10, 14, 81,
	13, 79, 78,
	14, 78, 94,
	9, 10, 15,
	11, 15, 89,
	10, 82, 83,
	15, 83, 97,
	9, 11, 16,
	12, 16, 86,
	11, 88, 87,
	16, 87, 96,
	9, 12, 17,
	13, 17, 80,
	12, 85, 84,
	17, 84, 95,
	18, 22, 23,
	19, 23, 60,
	22, 55, 54,
	23, 54, 90,
	18, 19, 24,
	20, 24, 78,
	19, 61, 62,
	24, 62, 94,
	18, 20, 25,
	21, 25, 68,
	20, 79, 80,
	25, 80, 95,
	18, 21, 26,
	22, 26, 56,
	21, 67, 66,
	26, 66, 91,
	27, 31, 32,
	28, 32, 66,
	31, 64, 63,
	32, 63, 91,
	27, 28, 33,
	29, 33, 84,
	28, 67, 68,
	33, 68, 95,
	27, 29, 34,
	30, 34, 74,
	29, 85, 86,
	34, 86, 96,
	27, 30, 35,
	31, 35, 65,
	30, 73, 72,
	35, 72, 92,
	36, 40, 41,
	37, 41, 72,
	40, 70, 69,
	41, 69, 92,
	36, 37, 42,
	38, 42, 87,
	37, 73, 74,
	42, 74, 96,
	36, 38, 43,
	39, 43, 77,
	38, 88, 89,
	43, 89, 97,
	36, 39, 44,
	40, 44, 71,
	39, 76, 75,
	44, 75, 93,
	45, 49, 50,
	46, 50, 62,
	49, 82, 81,
	50, 81, 94,
	45, 46, 51,
	47, 51, 57,
	46, 61, 60,
	51, 60, 90,
	45, 47, 52,
	48, 52, 75,
	47, 58, 59,
	52, 59, 93,
	45, 48, 53,
	49, 53, 83,
	48, 76, 77,
	53, 77, 97,
	1, 0, 5,
	55, 1, 54,
	5, 4, 57,
	54, 5, 90,
	2, 0, 6,
	64, 2, 63,
	6, 1, 56,
	63, 6, 91,
	3, 0, 7,
	70, 3, 69,
	7, 2, 65,
	69, 7, 92,
	4, 0, 8,
	58, 4, 59,
	8, 3, 71,
	59, 8, 93,
	10, 9, 14,
	82, 10, 81,
	14, 13, 78,
	81, 14, 94,
	11, 9, 15,
	88, 11, 89,
	15, 10, 83,
	89, 15, 97,
	12, 9, 16,
	85, 12, 86,
	16, 11, 87,
	86, 16, 96,
	13, 9, 17,
	79, 13, 80,
	17, 12, 84,
	80, 17, 95,
	19, 18, 23,
	61, 19, 60,
	23, 22, 54,
	60, 23, 90,
	20, 18, 24,
	79, 20, 78,
	24, 19, 62,
	78, 24, 94,
	21, 18, 25,
	67, 21, 68,
	25, 20, 80,
	68, 25, 95,
	22, 18, 26,
	55, 22, 56,
	26, 21, 66,
	56, 26, 91,
	28, 27, 32,
	67, 28, 66,
	32, 31, 63,
	66, 32, 91,
	29, 27, 33,
	85, 29, 84,
	33, 28, 68,
	84, 33, 95,
	30, 27, 34,
	73, 30, 74,
	34, 29, 86,
	74, 34, 96,
	31, 27, 35,
	64, 31, 65,
	35, 30, 72,
	65, 35, 92,
	37, 36, 41,
	73, 37, 72,
	41, 40, 69,
	72, 41, 92,
	38, 36, 42,
	88, 38, 87,
	42, 37, 74,
	87, 42, 96,
	39, 36, 43,
	76, 39, 77,
	43, 38, 89,
	77, 43, 97,
	40, 36, 44,
	70, 40, 71,
	44, 39, 75,
	71, 44, 93,
	46, 45, 50,
	61, 46, 62,
	50, 49, 81,
	62, 50, 94,
	47, 45, 51,
	58, 47, 57,
	51, 46, 60,
	57, 51, 90,
	48, 45, 52,
	76, 48, 75,
	52, 47, 59,
	75, 52, 93,
	49, 45, 53,
	82, 49, 83,
	53, 48, 77,
	83, 53, 97
};
